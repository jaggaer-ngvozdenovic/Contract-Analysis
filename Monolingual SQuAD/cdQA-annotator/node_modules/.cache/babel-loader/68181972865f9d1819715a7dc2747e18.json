{"remainingRequest":"/home/nikola/CODES/cdQA-annotator/node_modules/babel-loader/lib/index.js!/home/nikola/CODES/cdQA-annotator/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/nikola/CODES/cdQA-annotator/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/nikola/CODES/cdQA-annotator/node_modules/vue-bootstrap-typeahead/src/components/VueBootstrapTypeahead.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/nikola/CODES/cdQA-annotator/node_modules/vue-bootstrap-typeahead/src/components/VueBootstrapTypeahead.vue","mtime":1538362888000},{"path":"/home/nikola/CODES/cdQA-annotator/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/nikola/CODES/cdQA-annotator/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/nikola/CODES/cdQA-annotator/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/nikola/CODES/cdQA-annotator/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport VueBootstrapTypeaheadList from './VueBootstrapTypeaheadList.vue';\nimport ResizeObserver from 'resize-observer-polyfill';\nexport default {\n  name: 'VueBootstrapTypehead',\n  components: {\n    VueBootstrapTypeaheadList: VueBootstrapTypeaheadList\n  },\n  props: {\n    size: {\n      type: String,\n      default: null,\n      validator: function validator(size) {\n        return ['lg', 'sm'].indexOf(size) > -1;\n      }\n    },\n    value: {\n      type: String\n    },\n    data: {\n      type: Array,\n      required: true,\n      validator: function validator(d) {\n        return d instanceof Array;\n      }\n    },\n    serializer: {\n      type: Function,\n      default: function _default(d) {\n        return d;\n      },\n      validator: function validator(d) {\n        return d instanceof Function;\n      }\n    },\n    backgroundVariant: String,\n    textVariant: String,\n    inputClass: {\n      type: String,\n      default: ''\n    },\n    maxMatches: {\n      type: Number,\n      default: 10\n    },\n    minMatchingChars: {\n      type: Number,\n      default: 2\n    },\n    placeholder: String,\n    prepend: String,\n    append: String\n  },\n  computed: {\n    sizeClasses: function sizeClasses() {\n      return this.size ? \"input-group input-group-\".concat(this.size) : 'input-group';\n    },\n    formattedData: function formattedData() {\n      var _this = this;\n\n      if (!(this.data instanceof Array)) {\n        return [];\n      }\n\n      return this.data.map(function (d, i) {\n        return {\n          id: i,\n          data: d,\n          text: _this.serializer(d)\n        };\n      });\n    }\n  },\n  methods: {\n    resizeList: function resizeList(el) {\n      var rect = el.getBoundingClientRect();\n      var listStyle = this.$refs.list.$el.style; // Set the width of the list on resize\n\n      listStyle.width = rect.width + 'px'; // Set the margin when the prepend prop or slot is populated\n      // (setting the \"left\" CSS property doesn't work)\n\n      if (this.$refs.prependDiv) {\n        var prependRect = this.$refs.prependDiv.getBoundingClientRect();\n        listStyle.marginLeft = prependRect.width + 'px';\n      }\n    },\n    handleHit: function handleHit(evt) {\n      if (typeof this.value !== 'undefined') {\n        this.$emit('input', evt.text);\n      }\n\n      this.inputValue = evt.text;\n      this.$emit('hit', evt.data);\n      this.$refs.input.blur();\n      this.isFocused = false;\n    },\n    handleBlur: function handleBlur(evt) {\n      var tgt = evt.relatedTarget;\n\n      if (tgt && tgt.classList.contains('vbst-item')) {\n        return;\n      }\n\n      this.isFocused = false;\n    },\n    handleInput: function handleInput(newValue) {\n      this.inputValue = newValue; // If v-model is being used, emit an input event\n\n      if (typeof this.value !== 'undefined') {\n        this.$emit('input', newValue);\n      }\n    }\n  },\n  data: function data() {\n    return {\n      isFocused: false,\n      inputValue: ''\n    };\n  },\n  mounted: function mounted() {\n    var _this2 = this;\n\n    this.$_ro = new ResizeObserver(function (e) {\n      _this2.resizeList(_this2.$refs.input);\n    });\n    this.$_ro.observe(this.$refs.input);\n    this.$_ro.observe(this.$refs.list.$el);\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.$_ro.disconnect();\n  }\n};",{"version":3,"sources":["VueBootstrapTypeahead.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <div :class=\"sizeClasses\">\n      <div ref=\"prependDiv\" v-if=\"$slots.prepend || prepend\" class=\"input-group-prepend\">\n        <slot name=\"prepend\">\n          <span class=\"input-group-text\">{{ prepend }}</span>\n        </slot>\n      </div>\n      <input\n        ref=\"input\"\n        type=\"search\"\n        :class=\"`form-control ${inputClass}`\"\n        :placeholder=\"placeholder\"\n        :aria-label=\"placeholder\"\n        :value=\"inputValue\"\n        @focus=\"isFocused = true\"\n        @blur=\"handleBlur\"\n        @input=\"handleInput($event.target.value)\"\n        autocomplete=\"off\"\n      />\n      <div v-if=\"$slots.append || append\" class=\"input-group-append\">\n        <slot name=\"append\">\n          <span class=\"input-group-text\">{{ append }}</span>\n        </slot>\n      </div>\n    </div>\n    <vue-bootstrap-typeahead-list\n      class=\"vbt-autcomplete-list\"\n      ref=\"list\"\n      v-show=\"isFocused && data.length > 0\"\n      :query=\"inputValue\"\n      :data=\"formattedData\"\n      :background-variant=\"backgroundVariant\"\n      :text-variant=\"textVariant\"\n      :maxMatches=\"maxMatches\"\n      :minMatchingChars=\"minMatchingChars\"\n      @hit=\"handleHit\"\n    >\n      <!-- pass down all scoped slots -->\n      <template v-for=\"(slot, slotName) in $scopedSlots\" :slot=\"slotName\" slot-scope=\"{ data, htmlText }\">\n        <slot :name=\"slotName\" v-bind=\"{ data, htmlText }\"></slot>\n      </template>\n      <!-- below is the right solution, however if the user does not provide a scoped slot, vue will still set $scopedSlots.suggestion to a blank scope\n      <template v-if=\"$scopedSlots.suggestion\" slot=\"suggestion\" slot-scope=\"{ data, htmlText }\">\n        <slot name=\"suggestion\" v-bind=\"{ data, htmlText }\" />\n      </template>-->\n    </vue-bootstrap-typeahead-list>\n  </div>\n</template>\n\n<script>\nimport VueBootstrapTypeaheadList from './VueBootstrapTypeaheadList.vue'\nimport ResizeObserver from 'resize-observer-polyfill'\n\nexport default {\n  name: 'VueBootstrapTypehead',\n\n  components: {\n    VueBootstrapTypeaheadList\n  },\n\n  props: {\n    size: {\n      type: String,\n      default: null,\n      validator: size => ['lg', 'sm'].indexOf(size) > -1\n    },\n    value: {\n      type: String\n    },\n    data: {\n      type: Array,\n      required: true,\n      validator: d => d instanceof Array\n    },\n    serializer: {\n      type: Function,\n      default: (d) => d,\n      validator: d => d instanceof Function\n    },\n    backgroundVariant: String,\n    textVariant: String,\n    inputClass: {\n      type: String,\n      default: ''\n    },\n    maxMatches: {\n      type: Number,\n      default: 10\n    },\n    minMatchingChars: {\n      type: Number,\n      default: 2\n    },\n    placeholder: String,\n    prepend: String,\n    append: String\n  },\n\n  computed: {\n    sizeClasses() {\n      return this.size ? `input-group input-group-${this.size}` : 'input-group'\n    },\n\n    formattedData() {\n      if (!(this.data instanceof Array)) {\n        return []\n      }\n      return this.data.map((d, i) => {\n        return {\n          id: i,\n          data: d,\n          text: this.serializer(d)\n        }\n      })\n    }\n  },\n\n  methods: {\n    resizeList(el) {\n      const rect = el.getBoundingClientRect()\n      const listStyle = this.$refs.list.$el.style\n\n      // Set the width of the list on resize\n      listStyle.width = rect.width + 'px'\n\n      // Set the margin when the prepend prop or slot is populated\n      // (setting the \"left\" CSS property doesn't work)\n      if (this.$refs.prependDiv) {\n        const prependRect = this.$refs.prependDiv.getBoundingClientRect()\n        listStyle.marginLeft = prependRect.width + 'px'\n      }\n    },\n\n    handleHit(evt) {\n      if (typeof this.value !== 'undefined') {\n        this.$emit('input', evt.text)\n      }\n\n      this.inputValue = evt.text\n      this.$emit('hit', evt.data)\n      this.$refs.input.blur()\n      this.isFocused = false\n    },\n\n    handleBlur(evt) {\n      const tgt = evt.relatedTarget\n      if (tgt && tgt.classList.contains('vbst-item')) {\n        return\n      }\n      this.isFocused = false\n    },\n\n    handleInput(newValue) {\n      this.inputValue = newValue\n\n      // If v-model is being used, emit an input event\n      if (typeof this.value !== 'undefined') {\n        this.$emit('input', newValue)\n      }\n    }\n  },\n\n  data() {\n    return {\n      isFocused: false,\n      inputValue: ''\n    }\n  },\n\n  mounted() {\n    this.$_ro = new ResizeObserver(e => {\n      this.resizeList(this.$refs.input)\n    })\n    this.$_ro.observe(this.$refs.input)\n    this.$_ro.observe(this.$refs.list.$el)\n  },\n\n  beforeDestroy() {\n    this.$_ro.disconnect()\n  }\n}\n</script>\n\n<style scoped>\n  .vbt-autcomplete-list {\n    padding-top: 5px;\n    position: absolute;\n    max-height: 350px;\n    overflow-y: auto;\n    z-index: 999;\n  }\n</style>\n"],"sourceRoot":"node_modules/vue-bootstrap-typeahead/src/components"}]}